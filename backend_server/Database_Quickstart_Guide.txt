To create your own local mongodb
Step 1.) Download the latest version of mongodb for your OS at https://www.mongodb.com/download-center/community

Follow this guide to install for your OS
https://docs.mongodb.com/manual/administration/install-community/
After installing ensure mongodb is running as a service. For Windows, instructions to do so are towards the end of the guide after "Step 3"

Open the mongoshell by going to the install directory and clicking mongo.exe (for Windows, perhaps different on MAC)

Now create a new database named foods type:
use foods
This  will create a new database names foods.

Now we will create a new collection named foods inside the database foods (not very creative I know), we will also add data at the same time. Type:
db.foods.insertMany( [
{ "_id" : "McDonald's Egg McMuffin®", "restname" : "McDonald's", "item" : "Egg McMuffin®", "calories" : 300, "carbs" : 0, "protein" : 0, "total_fat" : 0, "type" : "Breakfast" }
{ "_id" : "Whataburger Sweet & Spicy Bacon Burger", "restname" : "Whataburger", "item" : "Sweet & Spicy Bacon Burger", "calories" : 1080, "carbs" : 0, "protein" : 0, "total_fat" : 0, "type" : "Burger" }
{ "_id" : "Whataburger Cinnamon Roll", "restname" : "Whataburger", "item" : "Cinnamon Roll", "calories" : 570, "carbs" : 0, "protein" : 0, "total_fat" : 0, "type" : "Dessert" }
{ "_id" : "McDonald's French Fries", "restname" : "McDonald's", "item" : "French Fries", "calories" : 340, "carbs" : 0, "protein" : 0, "total_fat" : 0, "type" : "Side" }
{ "_id" : "Chick-fil-A Waffle Fries", "restname" : "Chick-fil-A", "item" : "Waffle Fries", "calories" : 280, "carbs" : 0, "protein" : 0, "total_fat" : 0, "type" : "Side" }
{ "_id" : "Burger King BK Chicken Fries", "restname" : "Burger King", "item" : "BK Chicken Fries", "calories" : 290, "carbs" : 0, "protein" : 0, "total_fat" : 0, "type" : "Fries" }
{ "_id" : "Five Guys Burger Bowl", "restname" : "Five Guys", "item" : "Burger Bowl", "calories" : 220, "carbs" : 0, "protein" : 0, "total_fat" : 0, "type" : "Burger" }
{ "_id" : "Whataburger WHATABURGER JR.®", "restname" : "Whataburger", "item" : "WHATABURGER JR.®", "calories" : 400, "carbs" : 0, "protein" : 0, "total_fat" : 0, "type" : "Burger" }
{ "_id" : "Chick-fil-A Spicy Southwest Salad", "restname" : "Chick-fil-A", "item" : "Spicy Southwest Salad", "calories" : 350, "carbs" : 0, "protein" : 0, "total_fat" : 0, "type" : "Salad" }
{ "_id" : "McDonald's Happy Meal®", "restname" : "McDonald's", "item" : "Happy Meal®", "calories" : 501, "carbs" : 0, "protein" : 0, "total_fat" : 0, "type" : "Meal" } ] )
This will add 10 elements to the collection.

To see what we added type:
db.foods.find()
This will print the entire collection

To add a single document type:
db.foods.insertOne (
{ "_id" : <string>, "restname" : <string>, "item" : <string>, "calories" : <double>, "carbs" : <double>, "protein" : <double>, "total_fat" : <double>, "type" : <string> } )
This is the schema of the database I am currently using, notice that _id: <string> is made by combining the restname <string> and item <string>. I am doing that so 
if we implement searching rather than sorting we will be able to search on both restname or item without the user specifying which they intend.

Once the database service is running and we have loaded data into it. Start the server I made by navigating in the terminal to the directory of server.js 
(which should be a folder called backend_server).
While pointed at that directory type this command:
node server
This will start the server, which should print a message "server started"
Any calls to the servers get method should print to the terminal all data retrieved from the server. 

The server is listening to port 8000, so typing http:://localhost:8000/api/foods in the browser will also print the data to the window.